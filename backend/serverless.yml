service: ${env:PROJECT}

# https://www.serverless.com/framework/docs/deprecations#notification-mode
deprecationNotificationMode: warn

# https://www.serverless.com/framework/docs/deprecations#automatic-loading-environment-variables-from-env-and-envstage-files
useDotenv: true

custom:
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-properties-in-serverlessyml
  ssmPrefix: /${env:PROJECT}/${sls:stage}
  # https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-variables-using-the-ssm-parameter-store
  domainName: ${ssm:${self:custom.ssmPrefix}/DOMAIN_NAME}
  # https://github.com/amplify-education/serverless-domain-manager
  # 1. 事前に作成した証明書(by Terraform)を使用してカスタムドメイン(domainName)作成
  # 2. 指定したホストゾーン(hostsZoneId)にカスタムドメインのAレコードを登録
  # 3. API Gateway作成後 APIマッピングを設定
  customDomain:
    hostsZoneId: ${ssm:${self:custom.ssmPrefix}/HOSTED_ZONE_ID}
    domainName: api.${self:custom.domainName}
    certificateArn: ${ssm:${self:custom.ssmPrefix}/CERTIFICATE_ARN}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: http
    autoDomain: true

provider:
  name: aws
  region: ${opt:region, env:AWS_DEFAULT_REGION}
  stage: ${opt:stage}
  # https://www.serverless.com/framework/docs/providers/aws/guide/credentials
  profile: ${opt:aws-profile, ''}
  runtime: provided.al2
  # https://www.serverless.com/framework/docs/providers/aws/guide/iam#the-default-iam-role
  iam:
    role:
      managedPolicies:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
  httpApi:
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#disable-default-endpoint
    disableDefaultEndpoint: true
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#cors-setup
    cors:
      allowedOrigins:
        - https://www.${self:custom.domainName}
      allowedHeaders:
        - Content-Type
        - X-XSRF-TOKEN
      allowedMethods:
        - OPTIONS
        - POST
        - GET
        - PATCH
        - PUT
        - DELETE
      allowCredentials: true

  # https://www.serverless.com/framework/docs/providers/aws/guide/variables
  environment:
    APP_NAME: ${env:APP_NAME}
    APP_ENV: ${env:APP_ENV}
    APP_KEY: ${env:APP_KEY}
    APP_DEBUG: ${env:APP_DEBUG}
    APP_URL: https://api.${self:custom.domainName}
    LOG_CHANNEL: ${env:LOG_CHANNEL, "stderr"}
    LOG_LEVEL: ${env:LOG_LEVEL}
    DB_CONNECTION: ${env:DB_CONNECTION}
    DB_PORT: ${env:DB_PORT}
    DB_HOST: ${ssm:${self:custom.ssmPrefix}/DB_HOST}
    DB_DATABASE: ${ssm:${self:custom.ssmPrefix}/DB_DATABASE}
    DB_USERNAME: ${ssm:${self:custom.ssmPrefix}/DB_USERNAME}
    DB_PASSWORD: ${ssm:${self:custom.ssmPrefix}/DB_PASSWORD}
    CACHE_DRIVER: ${env:CACHE_DRIVER}
    SESSION_DRIVER: ${env:SESSION_DRIVER}
    SESSION_DOMAIN: .${self:custom.domainName}
    SESSION_LIFETIME: ${env:SESSION_LIFETIME}
    SESSION_SECURE_COOKIE: ${env:SESSION_SECURE_COOKIE, "true"}
    SANCTUM_STATEFUL_DOMAINS: www.${self:custom.domainName}
    SPA_URL: https://www.${self:custom.domainName}
    MAIL_MAILER: ${env:MAIL_MAILER}
    MAIL_PORT: ${env:MAIL_PORT}
    MAIL_HOST: ${env:MAIL_HOST}
    MAIL_USERNAME: ${ssm:${self:custom.ssmPrefix}/MAIL_USERNAME}
    MAIL_PASSWORD: ${ssm:${self:custom.ssmPrefix}/MAIL_PASSWORD}
    MAIL_ENCRYPTION: ${env:MAIL_ENCRYPTION}
    MAIL_FROM_ADDRESS: no-reply@${self:custom.domainName}
    MAIL_FROM_NAME: ${env:MAIL_FROM_NAME}
    ADMIN_EMAIL: ${env:ADMIN_EMAIL}
    GUEST_NAME: ${env:GUEST_NAME}
    GUEST_EMAIL: ${env:GUEST_EMAIL}
    GUEST_PASSWORD: ${env:GUEST_PASSWORD}
  # https://www.serverless.com/framework/docs/providers/aws/guide/functions#vpc-configuration
  vpc:
    securityGroupIds:
      - ${ssm:${self:custom.ssmPrefix}/SECURITY_GROUP_ID}
    subnetIds: ${ssm:${self:custom.ssmPrefix}/PRIVATE_SUBNET_IDS}

package:
  # https://www.serverless.com/framework/docs/deprecations#new-way-to-define-packaging-patterns
  patterns:
    - '!node_modules/**'
    - '!public/storage'
    - '!resources/assets/**'
    - '!storage/**'
    - '!tests/**'

functions:
  # This function runs the Laravel website/API
  web:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-81-fpm}
    events:
      - httpApi: '*'
  # This function lets us run artisan commands in Lambda
  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-81} # PHP
      - ${bref:layer.console} # The "console" layer
  # https://www.serverless.com/framework/docs/providers/aws/events/schedule/
  # https://bref.sh/docs/function/cron.html
  deleteUnverifiedUser:
    handler: functions/DeleteUnverifiedUser.php
    timeout: 120
    layers:
      - ${bref:layer.php-81}
    description: 'Delete unverified users every day at 3AM(UTC+9)'
    events:
      - schedule: cron(0 18 * * ? *)

plugins:
  - serverless-domain-manager
  - ./vendor/bref/bref

# Why are the following resources not built by Terraform?
# see: https://www.serverless.com/blog/definitive-guide-terraform-serverless
# That is, while Serverless builds an app-specific infrastructure, Terraform builds a shared infrastructure.
# About the syntax,  refer to the following links.
# https://www.serverless.com/framework/docs/providers/aws/guide/resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
resources:
  Resources:
    cacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_CACHE_TABLE, "cache"}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
